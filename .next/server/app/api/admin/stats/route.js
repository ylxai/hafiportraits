/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/admin/stats/route";
exports.ids = ["app/api/admin/stats/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "sharp":
/*!************************!*\
  !*** external "sharp" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("sharp");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ }),

/***/ "?32c4":
/*!****************************!*\
  !*** bufferutil (ignored) ***!
  \****************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?66e9":
/*!********************************!*\
  !*** utf-8-validate (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fadmin%2Fstats%2Froute&page=%2Fapi%2Fadmin%2Fstats%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fstats%2Froute.ts&appDir=%2Fhome%2Fdevbox%2Fhafi-portrait-stable%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fdevbox%2Fhafi-portrait-stable&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fadmin%2Fstats%2Froute&page=%2Fapi%2Fadmin%2Fstats%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fstats%2Froute.ts&appDir=%2Fhome%2Fdevbox%2Fhafi-portrait-stable%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fdevbox%2Fhafi-portrait-stable&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _home_devbox_hafi_portrait_stable_src_app_api_admin_stats_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/admin/stats/route.ts */ \"(rsc)/./src/app/api/admin/stats/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/admin/stats/route\",\n        pathname: \"/api/admin/stats\",\n        filename: \"route\",\n        bundlePath: \"app/api/admin/stats/route\"\n    },\n    resolvedPagePath: \"/home/devbox/hafi-portrait-stable/src/app/api/admin/stats/route.ts\",\n    nextConfigOutput,\n    userland: _home_devbox_hafi_portrait_stable_src_app_api_admin_stats_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/admin/stats/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZhZG1pbiUyRnN0YXRzJTJGcm91dGUmcGFnZT0lMkZhcGklMkZhZG1pbiUyRnN0YXRzJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGYWRtaW4lMkZzdGF0cyUyRnJvdXRlLnRzJmFwcERpcj0lMkZob21lJTJGZGV2Ym94JTJGaGFmaS1wb3J0cmFpdC1zdGFibGUlMkZzcmMlMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRmhvbWUlMkZkZXZib3glMkZoYWZpLXBvcnRyYWl0LXN0YWJsZSZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUNrQjtBQUMvRjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHVHQUF1RztBQUMvRztBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQzZKOztBQUU3SiIsInNvdXJjZXMiOlsid2VicGFjazovL2hhZmlwb3J0cmFpdC1uZXh0anMvPzg2NmUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL2hvbWUvZGV2Ym94L2hhZmktcG9ydHJhaXQtc3RhYmxlL3NyYy9hcHAvYXBpL2FkbWluL3N0YXRzL3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9hZG1pbi9zdGF0cy9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2FkbWluL3N0YXRzXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9hZG1pbi9zdGF0cy9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9ob21lL2RldmJveC9oYWZpLXBvcnRyYWl0LXN0YWJsZS9zcmMvYXBwL2FwaS9hZG1pbi9zdGF0cy9yb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBoZWFkZXJIb29rcywgc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9hZG1pbi9zdGF0cy9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBoZWFkZXJIb29rcywgc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fadmin%2Fstats%2Froute&page=%2Fapi%2Fadmin%2Fstats%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fstats%2Froute.ts&appDir=%2Fhome%2Fdevbox%2Fhafi-portrait-stable%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fdevbox%2Fhafi-portrait-stable&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/admin/stats/route.ts":
/*!******************************************!*\
  !*** ./src/app/api/admin/stats/route.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var _lib_database__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/database */ \"(rsc)/./src/lib/database.ts\");\n\n // Mengimpor database langsung\nasync function GET() {\n    try {\n        const stats = await _lib_database__WEBPACK_IMPORTED_MODULE_1__.database.getStats(); // Menggunakan database langsung\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json(stats);\n    } catch (error) {\n        console.error(\"Get stats error:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            message: \"Failed to fetch stats\",\n            error: error.message\n        }, {\n            status: 400\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS9hZG1pbi9zdGF0cy9yb3V0ZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBMkM7QUFDRCxDQUFDLDhCQUE4QjtBQUVsRSxlQUFlRTtJQUNwQixJQUFJO1FBQ0YsTUFBTUMsUUFBUSxNQUFNRixtREFBUUEsQ0FBQ0csUUFBUSxJQUFJLGdDQUFnQztRQUN6RSxPQUFPSixrRkFBWUEsQ0FBQ0ssSUFBSSxDQUFDRjtJQUMzQixFQUFFLE9BQU9HLE9BQVk7UUFDbkJDLFFBQVFELEtBQUssQ0FBQyxvQkFBb0JBO1FBQ2xDLE9BQU9OLGtGQUFZQSxDQUFDSyxJQUFJLENBQ3RCO1lBQUVHLFNBQVM7WUFBeUJGLE9BQU9BLE1BQU1FLE9BQU87UUFBQyxHQUN6RDtZQUFFQyxRQUFRO1FBQUk7SUFFbEI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2hhZmlwb3J0cmFpdC1uZXh0anMvLi9zcmMvYXBwL2FwaS9hZG1pbi9zdGF0cy9yb3V0ZS50cz85ZjJhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcclxuaW1wb3J0IHsgZGF0YWJhc2UgfSBmcm9tICdAL2xpYi9kYXRhYmFzZSc7IC8vIE1lbmdpbXBvciBkYXRhYmFzZSBsYW5nc3VuZ1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEdFVCgpIHtcclxuICB0cnkge1xyXG4gICAgY29uc3Qgc3RhdHMgPSBhd2FpdCBkYXRhYmFzZS5nZXRTdGF0cygpOyAvLyBNZW5nZ3VuYWthbiBkYXRhYmFzZSBsYW5nc3VuZ1xyXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHN0YXRzKTtcclxuICB9IGNhdGNoIChlcnJvcjogYW55KSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdHZXQgc3RhdHMgZXJyb3I6JywgZXJyb3IpO1xyXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICB7IG1lc3NhZ2U6IFwiRmFpbGVkIHRvIGZldGNoIHN0YXRzXCIsIGVycm9yOiBlcnJvci5tZXNzYWdlIH0sXHJcbiAgICAgIHsgc3RhdHVzOiA0MDAgfVxyXG4gICAgKTtcclxuICB9XHJcbn0iXSwibmFtZXMiOlsiTmV4dFJlc3BvbnNlIiwiZGF0YWJhc2UiLCJHRVQiLCJzdGF0cyIsImdldFN0YXRzIiwianNvbiIsImVycm9yIiwiY29uc29sZSIsIm1lc3NhZ2UiLCJzdGF0dXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/admin/stats/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/database.ts":
/*!*****************************!*\
  !*** ./src/lib/database.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   database: () => (/* binding */ database)\n/* harmony export */ });\n/* harmony import */ var _supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabase */ \"(rsc)/./src/lib/supabase.ts\");\n/* harmony import */ var _image_optimizer_server__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./image-optimizer-server */ \"(rsc)/./src/lib/image-optimizer-server.ts\");\n // Pastikan ini diimpor dengan benar\n\nclass DatabaseService {\n    constructor(){\n        this.supabase = _supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin;\n        this.imageOptimizer = new _image_optimizer_server__WEBPACK_IMPORTED_MODULE_1__.ImageOptimizerServer(this.supabase, \"photos\");\n    }\n    // --- Metode Event ---\n    async getAllEvents() {\n        const { data, error } = await this.supabase.from(\"events\").select(\"*\").order(\"date\", {\n            ascending: false\n        });\n        if (error) throw error;\n        return data;\n    }\n    async getPublicEvents() {\n        const { data, error } = await this.supabase.from(\"events\").select(\"id, name, date, is_premium, qr_code, shareable_link\").is(\"is_premium\", false) // Asumsi hanya event non-premium yang publik, sesuaikan jika perlu\n        .order(\"date\", {\n            ascending: false\n        });\n        if (error) throw error;\n        return data;\n    }\n    async getEventById(id) {\n        const { data, error } = await this.supabase.from(\"events\").select(\"*\").eq(\"id\", id).single();\n        if (error) throw error;\n        return data;\n    }\n    async createEvent(event) {\n        // First, insert the event to get the ID\n        const { data: newEvent, error } = await this.supabase.from(\"events\").insert(event).select().single();\n        if (error) throw error;\n        try {\n            // Generate QR code and shareable link\n            const baseUrl = process.env.NEXT_PUBLIC_APP_URL || \"http://localhost:3000\";\n            const eventUrl = `${baseUrl}/event/${newEvent.id}?code=${newEvent.access_code}`;\n            // Generate QR code using a service like QRServer.com\n            const qrCodeUrl = `https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${encodeURIComponent(eventUrl)}`;\n            // Update the event with QR code and shareable link\n            const { data: updatedEvent, error: updateError } = await this.supabase.from(\"events\").update({\n                qr_code: qrCodeUrl,\n                shareable_link: eventUrl\n            }).eq(\"id\", newEvent.id).select().single();\n            if (updateError) throw updateError;\n            return updatedEvent;\n        } catch (updateError) {\n            console.error(\"Error generating QR code:\", updateError);\n            // Return the event even if QR code generation fails\n            return newEvent;\n        }\n    }\n    async updateEvent(id, updates) {\n        const { data, error } = await this.supabase.from(\"events\").update(updates).eq(\"id\", id).select().single();\n        if (error) throw error;\n        return data;\n    }\n    async deleteEvent(id) {\n        const { error } = await this.supabase.from(\"events\").delete().eq(\"id\", id);\n        if (error) throw error;\n    }\n    async verifyEventAccessCode(eventId, code) {\n        const { data, error } = await this.supabase.from(\"events\").select(\"id\").eq(\"id\", eventId).eq(\"access_code\", code).single();\n        if (error) {\n            if (true) {\n                console.error(\"Error verifying access code:\", error);\n            }\n            return false;\n        }\n        return !!data;\n    }\n    // --- Metode Foto ---\n    async getEventPhotos(eventId) {\n        const { data, error } = await this.supabase.from(\"photos\").select(\"*\").eq(\"event_id\", eventId).order(\"uploaded_at\", {\n            ascending: false\n        });\n        if (error) throw error;\n        return data;\n    }\n    async getHomepagePhotos() {\n        const { data, error } = await this.supabase.from(\"photos\").select(\"*\").eq(\"is_homepage\", true) // Asumsi kolom ini ada di tabel photos\n        .order(\"uploaded_at\", {\n            ascending: false\n        });\n        if (error) {\n            // Log error yang lebih spesifik jika kolom tidak ditemukan\n            if (error.code === \"42P01\") {\n                if (true) {\n                    console.error(\"Database Error: Column 'is_homepage' does not exist. Please add it to your 'photos' table.\");\n                }\n            }\n            throw error;\n        }\n        return data;\n    }\n    validateFileExtension(filename) {\n        const allowedExtensions = [\n            \"jpg\",\n            \"jpeg\",\n            \"png\",\n            \"gif\",\n            \"webp\"\n        ];\n        const ext = filename.split(\".\").pop()?.toLowerCase();\n        return ext ? allowedExtensions.includes(ext) : false;\n    }\n    generateFileName(originalName) {\n        const fileExt = originalName.split(\".\").pop()?.toLowerCase() || \"jpg\";\n        const timestamp = Date.now();\n        const randomStr = Math.random().toString(36).substring(2, 8);\n        return `${timestamp}_${randomStr}.${fileExt}`;\n    }\n    async getEvents() {\n        const { data, error } = await this.supabase.from(\"events\").select(\"*\").order(\"date\", {\n            ascending: false\n        });\n        if (error) throw error;\n        return data || [];\n    }\n    async getSimpleCompressionAnalytics() {\n        try {\n            // Get photos with compression data (simplified version)\n            const { data: photos, error: photosError } = await this.supabase.from(\"photos\").select(\"*\").not(\"optimized_images\", \"is\", null).order(\"uploaded_at\", {\n                ascending: false\n            }).limit(100); // Limit to recent 100 photos\n            if (photosError) throw photosError;\n            // Calculate simple analytics\n            const totalPhotos = photos?.length || 0;\n            let totalOriginalSize = 0;\n            let totalOptimizedSize = 0;\n            let totalSavingsBytes = 0;\n            const recentPhotos = [];\n            photos?.forEach((photo)=>{\n                if (photo.image_metadata && photo.optimized_images) {\n                    const originalSize = photo.image_metadata.original_size || 0;\n                    const optimizedSize = photo.optimized_images.medium?.size || 0;\n                    const savings = originalSize - optimizedSize;\n                    const savingsPercentage = originalSize > 0 ? savings / originalSize * 100 : 0;\n                    totalOriginalSize += originalSize;\n                    totalOptimizedSize += optimizedSize;\n                    totalSavingsBytes += savings;\n                    // Recent photos (top 10)\n                    if (recentPhotos.length < 10) {\n                        recentPhotos.push({\n                            id: photo.id,\n                            original_name: photo.original_name,\n                            original_size: originalSize,\n                            optimized_size: optimizedSize,\n                            savings_percentage: savingsPercentage,\n                            uploaded_at: photo.uploaded_at\n                        });\n                    }\n                }\n            });\n            const totalSavingsPercentage = totalOriginalSize > 0 ? totalSavingsBytes / totalOriginalSize * 100 : 0;\n            const averageCompressionRatio = totalOptimizedSize > 0 ? totalOriginalSize / totalOptimizedSize : 1;\n            return {\n                totalPhotos,\n                totalOriginalSize,\n                totalOptimizedSize,\n                totalSavingsBytes,\n                totalSavingsPercentage,\n                storageSaved: this.formatFileSize(totalSavingsBytes),\n                averageCompressionRatio,\n                recentPhotos: recentPhotos.sort((a, b)=>b.savings_percentage - a.savings_percentage)\n            };\n        } catch (error) {\n            console.error(\"Error getting simple compression analytics:\", error);\n            throw error;\n        }\n    }\n    formatFileSize(bytes) {\n        if (bytes === 0) return \"0 Bytes\";\n        const k = 1024;\n        const sizes = [\n            \"Bytes\",\n            \"KB\",\n            \"MB\",\n            \"GB\"\n        ];\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n    }\n    async validateEventAccess(eventId) {\n        const { data, error } = await this.supabase.from(\"events\").select(\"id, is_premium\").eq(\"id\", eventId).single();\n        if (error || !data) {\n            throw new Error(\"Event not found\");\n        }\n        return true;\n    }\n    async uploadEventPhoto(eventId, file, uploaderName = \"Anonymous\", albumName = \"Tamu\") {\n        // Validate eventId exists\n        await this.validateEventAccess(eventId);\n        // Validate file extension\n        if (!this.validateFileExtension(file.name)) {\n            throw new Error(\"Invalid file type. Allowed: jpg, jpeg, png, gif, webp\");\n        }\n        try {\n            // Convert File to Buffer for server-side processing\n            const arrayBuffer = await file.arrayBuffer();\n            const buffer = Buffer.from(arrayBuffer);\n            // Process image with optimization (server-side)\n            const optimizedImages = await this.imageOptimizer.processImage(buffer, file.name, `events/${eventId}`);\n            // Get image metadata\n            const sharp = (await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! sharp */ \"sharp\", 23))).default;\n            const metadata = await sharp(buffer).metadata();\n            const imageMetadata = {\n                width: metadata.width || 0,\n                height: metadata.height || 0,\n                format: metadata.format || \"jpeg\",\n                original_size: buffer.length\n            };\n            // Calculate compression stats\n            const compressionStats = _image_optimizer_server__WEBPACK_IMPORTED_MODULE_1__.ImageOptimizerServer.getCompressionStats(optimizedImages);\n            const { data: photoData, error: insertError } = await this.supabase.from(\"photos\").insert({\n                event_id: eventId,\n                url: optimizedImages.original.url,\n                thumbnail_url: optimizedImages.thumbnail.url,\n                original_name: file.name,\n                uploader_name: uploaderName,\n                album_name: albumName,\n                is_homepage: false,\n                filename: this.generateFileName(file.name),\n                optimized_images: optimizedImages,\n                image_metadata: imageMetadata,\n                compression_stats: compressionStats\n            }).select().single();\n            if (insertError) throw insertError;\n            return photoData;\n        } catch (error) {\n            console.error(\"Error uploading optimized event photo:\", error);\n            throw error;\n        }\n    }\n    async uploadHomepagePhoto(file) {\n        // Validate file extension\n        if (!this.validateFileExtension(file.name)) {\n            throw new Error(\"Invalid file type. Allowed: jpg, jpeg, png, gif, webp\");\n        }\n        try {\n            // Convert File to Buffer for server-side processing\n            const arrayBuffer = await file.arrayBuffer();\n            const buffer = Buffer.from(arrayBuffer);\n            // Process image with optimization (server-side)\n            const optimizedImages = await this.imageOptimizer.processImage(buffer, file.name, \"homepage\");\n            // Get image metadata\n            const sharp = (await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! sharp */ \"sharp\", 23))).default;\n            const metadata = await sharp(buffer).metadata();\n            const imageMetadata = {\n                width: metadata.width || 0,\n                height: metadata.height || 0,\n                format: metadata.format || \"jpeg\",\n                original_size: buffer.length\n            };\n            // Calculate compression stats\n            const compressionStats = _image_optimizer_server__WEBPACK_IMPORTED_MODULE_1__.ImageOptimizerServer.getCompressionStats(optimizedImages);\n            const { data: photoData, error: insertError } = await this.supabase.from(\"photos\").insert({\n                url: optimizedImages.original.url,\n                thumbnail_url: optimizedImages.thumbnail.url,\n                original_name: file.name,\n                is_homepage: true,\n                event_id: null,\n                uploader_name: \"Admin\",\n                album_name: \"Homepage\",\n                filename: this.generateFileName(file.name),\n                optimized_images: optimizedImages,\n                image_metadata: imageMetadata,\n                compression_stats: compressionStats\n            }).select().single();\n            if (insertError) throw insertError;\n            return photoData;\n        } catch (error) {\n            console.error(\"Error uploading optimized homepage photo:\", error);\n            throw error;\n        }\n    }\n    async getPhotoById(photoId) {\n        const { data, error } = await this.supabase.from(\"photos\").select(\"*\").eq(\"id\", photoId).single();\n        if (error) throw error;\n        return data;\n    }\n    async deletePhoto(photoId) {\n        // Get photo details\n        const photo = await this.getPhotoById(photoId);\n        if (!photo) {\n            throw new Error(\"Photo not found\");\n        }\n        try {\n            // Extract file path from URL or use stored filename\n            let filePath;\n            if (photo.filename) {\n                // Use stored filename if available\n                if (photo.is_homepage) {\n                    filePath = `homepage/${photo.filename}`;\n                } else if (photo.event_id) {\n                    filePath = `events/${photo.event_id}/${photo.filename}`;\n                } else {\n                    // Fallback if structure is unclear\n                    filePath = photo.filename;\n                }\n            } else {\n                // Extract from URL as fallback\n                const urlParts = photo.url.split(\"/\");\n                const fileName = urlParts[urlParts.length - 1];\n                if (photo.is_homepage) {\n                    filePath = `homepage/${fileName}`;\n                } else if (photo.event_id) {\n                    filePath = `events/${photo.event_id}/${fileName}`;\n                } else {\n                    // Fallback if structure is unclear\n                    filePath = fileName;\n                }\n            }\n            // Delete from storage first\n            const { error: deleteStorageError } = await this.supabase.storage.from(\"photos\").remove([\n                filePath\n            ]);\n            if (deleteStorageError) {\n                if (true) {\n                    console.error(\"Error deleting file from storage:\", deleteStorageError);\n                }\n            // Continue with database deletion even if storage deletion fails\n            }\n            // Then delete from database\n            const { error: deleteDbError } = await this.supabase.from(\"photos\").delete().eq(\"id\", photoId);\n            if (deleteDbError) throw deleteDbError;\n        } catch (error) {\n            // If it's not a storage error, rethrow\n            if (error instanceof Error && !error.message.includes(\"storage\")) {\n                throw error;\n            }\n            // For storage errors, try to delete from database anyway\n            const { error: deleteDbError } = await this.supabase.from(\"photos\").delete().eq(\"id\", photoId);\n            if (deleteDbError) throw deleteDbError;\n        }\n    }\n    async likePhoto(photoId) {\n        const { data, error } = await this.supabase.rpc(\"increment_likes\", {\n            photo_id: photoId\n        }); // Panggil fungsi RPC\n        if (error) throw error;\n    }\n    // --- Metode Pesan ---\n    async getEventMessages(eventId) {\n        const { data, error } = await this.supabase.from(\"messages\").select(\"*\").eq(\"event_id\", eventId).order(\"sent_at\", {\n            ascending: false\n        });\n        if (error) throw error;\n        return data;\n    }\n    async createMessage(message) {\n        const { data, error } = await this.supabase.from(\"messages\").insert(message).select().single();\n        if (error) throw error;\n        return data;\n    }\n    async heartMessage(messageId) {\n        const { data, error } = await this.supabase.rpc(\"increment_hearts\", {\n            message_id: messageId\n        }); // Panggil fungsi RPC\n        if (error) throw error;\n    }\n    async getMessageById(messageId) {\n        const { data, error } = await this.supabase.from(\"messages\").select(\"*\").eq(\"id\", messageId).single();\n        if (error) throw error;\n        return data;\n    }\n    async updateMessageHearts(messageId, hearts) {\n        const { error } = await this.supabase.from(\"messages\").update({\n            hearts\n        }).eq(\"id\", messageId);\n        if (error) throw error;\n    }\n    async addMessageReaction(messageId, reactionType) {\n        // Get current message\n        const message = await this.getMessageById(messageId);\n        if (!message) {\n            throw new Error(\"Message not found\");\n        }\n        // Get current reactions or initialize\n        const currentReactions = message.reactions || {\n            love: 0,\n            laugh: 0,\n            wow: 0,\n            sad: 0,\n            angry: 0\n        };\n        // Increment the specific reaction\n        currentReactions[reactionType] = (currentReactions[reactionType] || 0) + 1;\n        // Update in database\n        const { error } = await this.supabase.from(\"messages\").update({\n            reactions: currentReactions\n        }).eq(\"id\", messageId);\n        if (error) throw error;\n    }\n    async updateMessageReactions(messageId, reactions) {\n        const { error } = await this.supabase.from(\"messages\").update({\n            reactions\n        }).eq(\"id\", messageId);\n        if (error) throw error;\n    }\n    // --- Metode Statistik ---\n    async getStats() {\n        const { count: totalEvents, error: eventsError } = await this.supabase.from(\"events\").select(\"*\", {\n            count: \"exact\",\n            head: true\n        });\n        if (eventsError) throw eventsError;\n        const { count: totalPhotos, error: photosError } = await this.supabase.from(\"photos\").select(\"*\", {\n            count: \"exact\",\n            head: true\n        });\n        if (photosError) throw photosError;\n        const { count: totalMessages, error: messagesError } = await this.supabase.from(\"messages\").select(\"*\", {\n            count: \"exact\",\n            head: true\n        });\n        if (messagesError) throw messagesError;\n        return {\n            totalEvents: totalEvents || 0,\n            totalPhotos: totalPhotos || 0,\n            totalMessages: totalMessages || 0\n        };\n    }\n}\nconst database = new DatabaseService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/database.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/image-optimizer-server.ts":
/*!*******************************************!*\
  !*** ./src/lib/image-optimizer-server.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ImageOptimizerServer: () => (/* binding */ ImageOptimizerServer)\n/* harmony export */ });\n/* harmony import */ var sharp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sharp */ \"sharp\");\n/* harmony import */ var sharp__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(sharp__WEBPACK_IMPORTED_MODULE_0__);\n/**\r\n * Server-side Image Optimization Service\r\n * Handles compression, resizing, and format conversion on the server\r\n */ \nclass ImageOptimizerServer {\n    constructor(supabase, bucketName = \"photos\"){\n        this.supabase = supabase;\n        this.bucketName = bucketName;\n    }\n    /**\r\n   * Generate filename for different sizes\r\n   */ generateFilename(originalName, size, timestamp) {\n        const ext = originalName.split(\".\").pop()?.toLowerCase() || \"jpg\";\n        const nameWithoutExt = originalName.replace(/\\.[^/.]+$/, \"\");\n        const cleanName = nameWithoutExt.replace(/[^a-zA-Z0-9]/g, \"_\");\n        return `${timestamp}_${cleanName}_${size}.${ext}`;\n    }\n    /**\r\n   * Optimize single image to specific size\r\n   */ async optimizeImage(buffer, width, height, quality) {\n        return await sharp__WEBPACK_IMPORTED_MODULE_0___default()(buffer).resize(width, height, {\n            fit: \"inside\",\n            withoutEnlargement: true,\n            background: {\n                r: 255,\n                g: 255,\n                b: 255,\n                alpha: 1\n            }\n        }).jpeg({\n            quality,\n            progressive: true,\n            mozjpeg: true\n        }).toBuffer();\n    }\n    /**\r\n   * Get image metadata\r\n   */ async getImageMetadata(buffer) {\n        const metadata = await sharp__WEBPACK_IMPORTED_MODULE_0___default()(buffer).metadata();\n        return {\n            width: metadata.width || 0,\n            height: metadata.height || 0,\n            format: metadata.format || \"jpeg\",\n            size: buffer.length\n        };\n    }\n    /**\r\n   * Upload buffer to Supabase Storage\r\n   */ async uploadToStorage(buffer, filePath, contentType = \"image/jpeg\") {\n        const { data, error } = await this.supabase.storage.from(this.bucketName).upload(filePath, buffer, {\n            contentType,\n            cacheControl: \"31536000\",\n            upsert: false\n        });\n        if (error) throw error;\n        const { data: publicUrlData } = this.supabase.storage.from(this.bucketName).getPublicUrl(data.path);\n        return publicUrlData.publicUrl;\n    }\n    /**\r\n   * Process and optimize image for all sizes (SERVER-SIDE ONLY)\r\n   */ async processImage(buffer, originalName, folder = \"optimized\") {\n        try {\n            // Get original metadata\n            const originalMetadata = await this.getImageMetadata(buffer);\n            const timestamp = Date.now();\n            const randomId = Math.random().toString(36).substring(2, 8);\n            // Define sizes\n            const sizes = {\n                thumbnail: {\n                    width: 300,\n                    height: 225,\n                    quality: 85\n                },\n                small: {\n                    width: 800,\n                    height: 600,\n                    quality: 90\n                },\n                medium: {\n                    width: 1200,\n                    height: 900,\n                    quality: 92\n                },\n                large: {\n                    width: 1920,\n                    height: 1440,\n                    quality: 95\n                }\n            };\n            // Upload original\n            const originalPath = `${folder}/original/${timestamp}_${randomId}_original.jpg`;\n            const originalUrl = await this.uploadToStorage(buffer, originalPath);\n            // Process and upload optimized versions\n            const results = {\n                original: {\n                    url: originalUrl,\n                    size: originalMetadata.size,\n                    width: originalMetadata.width,\n                    height: originalMetadata.height\n                },\n                thumbnail: {\n                    url: \"\",\n                    size: 0\n                },\n                small: {\n                    url: \"\",\n                    size: 0\n                },\n                medium: {\n                    url: \"\",\n                    size: 0\n                },\n                large: {\n                    url: \"\",\n                    size: 0\n                }\n            };\n            // Process each size\n            for (const [sizeName, config] of Object.entries(sizes)){\n                const optimizedBuffer = await this.optimizeImage(buffer, config.width, config.height, config.quality);\n                const optimizedPath = `${folder}/${sizeName}/${timestamp}_${randomId}_${sizeName}.jpg`;\n                const optimizedUrl = await this.uploadToStorage(optimizedBuffer, optimizedPath);\n                results[sizeName] = {\n                    url: optimizedUrl,\n                    size: optimizedBuffer.length\n                };\n            }\n            return results;\n        } catch (error) {\n            console.error(\"Image processing error:\", error);\n            throw new Error(\"Failed to process image\");\n        }\n    }\n    /**\r\n   * Get appropriate image URL based on viewport/usage\r\n   */ static getOptimalImageUrl(images, usage) {\n        switch(usage){\n            case \"thumbnail\":\n                return images.thumbnail.url;\n            case \"gallery\":\n                return images.medium.url;\n            case \"lightbox\":\n                return images.large.url;\n            case \"download\":\n                return images.original.url;\n            case \"mobile\":\n                return images.small.url;\n            default:\n                return images.medium.url;\n        }\n    }\n    /**\r\n   * Get responsive image sources for different screen sizes\r\n   */ static getResponsiveSources(images) {\n        return {\n            srcSet: [\n                `${images.small.url} 800w`,\n                `${images.medium.url} 1200w`,\n                `${images.large.url} 1920w`\n            ].join(\", \"),\n            sizes: [\n                \"(max-width: 768px) 800px\",\n                \"(max-width: 1200px) 1200px\",\n                \"1920px\"\n            ].join(\", \"),\n            src: images.medium.url,\n            placeholder: images.thumbnail.url\n        };\n    }\n    /**\r\n   * Calculate compression savings\r\n   */ static getCompressionStats(images) {\n        const originalSize = images.original.size;\n        const optimizedSize = images.medium.size;\n        const savings = (originalSize - optimizedSize) / originalSize * 100;\n        return {\n            originalSize: this.formatFileSize(originalSize),\n            optimizedSize: this.formatFileSize(optimizedSize),\n            savings: Math.round(savings),\n            ratio: `${Math.round(originalSize / optimizedSize)}:1`\n        };\n    }\n    /**\r\n   * Format file size for display\r\n   */ static formatFileSize(bytes) {\n        if (bytes === 0) return \"0 Bytes\";\n        const k = 1024;\n        const sizes = [\n            \"Bytes\",\n            \"KB\",\n            \"MB\",\n            \"GB\"\n        ];\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/image-optimizer-server.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/supabase.ts":
/*!*****************************!*\
  !*** ./src/lib/supabase.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   STORAGE_BUCKET: () => (/* binding */ STORAGE_BUCKET),\n/* harmony export */   deleteFile: () => (/* binding */ deleteFile),\n/* harmony export */   generateFilePath: () => (/* binding */ generateFilePath),\n/* harmony export */   supabase: () => (/* binding */ supabase),\n/* harmony export */   supabaseAdmin: () => (/* binding */ supabaseAdmin),\n/* harmony export */   uploadFile: () => (/* binding */ uploadFile)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\n// Create Supabase client for client-side operations\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(\"https://azspktldiblhrwebzmwq.supabase.co\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF6c3BrdGxkaWJsaHJ3ZWJ6bXdxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM5NDQwNDQsImV4cCI6MjA2OTUyMDA0NH0.uKHB4K9hxUDTc0ZkwidCJv_Ev-oa99AflFvrFt_8MG8\");\n// Create Supabase admin client for server-side operations\n// Pastikan ini diekspor langsung agar 'database' bisa menggunakannya\nconst supabaseAdmin = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(\"https://azspktldiblhrwebzmwq.supabase.co\", process.env.SUPABASE_SERVICE_ROLE_KEY, {\n    auth: {\n        autoRefreshToken: false,\n        persistSession: false\n    }\n});\n// Storage bucket name\nconst STORAGE_BUCKET = process.env.SUPABASE_STORAGE_BUCKET || \"photos\"; // Menggunakan default 'photos'\n// Upload file to Supabase Storage\nasync function uploadFile(file, path) {\n    const { data, error } = await supabaseAdmin.storage.from(STORAGE_BUCKET).upload(path, file, {\n        cacheControl: \"3600\",\n        upsert: false\n    });\n    if (error) {\n        throw new Error(`Upload failed: ${error.message}`);\n    }\n    // Get public URL\n    const { data: publicUrlData } = supabaseAdmin.storage.from(STORAGE_BUCKET).getPublicUrl(data.path);\n    return publicUrlData.publicUrl;\n}\n// Delete file from Supabase Storage\nasync function deleteFile(path) {\n    const { error } = await supabaseAdmin.storage.from(STORAGE_BUCKET).remove([\n        path\n    ]);\n    if (error) {\n        throw new Error(`Delete failed: ${error.message}`);\n    }\n}\n// Generate unique file path\nfunction generateFilePath(folder, originalName, eventId) {\n    const timestamp = Date.now();\n    const randomStr = Math.random().toString(36).substring(2, 8);\n    const fileExtension = originalName.split(\".\").pop();\n    const fileName = `${timestamp}_${randomStr}.${fileExtension}`;\n    if (eventId) {\n        return `${folder}/${eventId}/${fileName}`;\n    }\n    return `${folder}/${fileName}`;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3N1cGFiYXNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBcUQ7QUFFckQsb0RBQW9EO0FBQzdDLE1BQU1DLFdBQVdELG1FQUFZQSxDQUNsQ0UsMENBQW9DLEVBQ3BDQSxrTkFBeUMsRUFDekM7QUFFRiwwREFBMEQ7QUFDMUQscUVBQXFFO0FBQzlELE1BQU1JLGdCQUFnQk4sbUVBQVlBLENBQ3ZDRSwwQ0FBb0MsRUFDcENBLFFBQVFDLEdBQUcsQ0FBQ0kseUJBQXlCLEVBQ3JDO0lBQ0VDLE1BQU07UUFDSkMsa0JBQWtCO1FBQ2xCQyxnQkFBZ0I7SUFDbEI7QUFDRixHQUNBO0FBRUYsc0JBQXNCO0FBQ2YsTUFBTUMsaUJBQWlCVCxRQUFRQyxHQUFHLENBQUNTLHVCQUF1QixJQUFJLFNBQVMsQ0FBQywrQkFBK0I7QUFFOUcsa0NBQWtDO0FBQzNCLGVBQWVDLFdBQVdDLElBQVUsRUFBRUMsSUFBWTtJQUN2RCxNQUFNLEVBQUVDLElBQUksRUFBRUMsS0FBSyxFQUFFLEdBQUcsTUFBTVgsY0FBY1ksT0FBTyxDQUNoREMsSUFBSSxDQUFDUixnQkFDTFMsTUFBTSxDQUFDTCxNQUFNRCxNQUFNO1FBQ2xCTyxjQUFjO1FBQ2RDLFFBQVE7SUFDVjtJQUVGLElBQUlMLE9BQU87UUFDVCxNQUFNLElBQUlNLE1BQU0sQ0FBQyxlQUFlLEVBQUVOLE1BQU1PLE9BQU8sQ0FBQyxDQUFDO0lBQ25EO0lBRUEsaUJBQWlCO0lBQ2pCLE1BQU0sRUFBRVIsTUFBTVMsYUFBYSxFQUFFLEdBQUduQixjQUFjWSxPQUFPLENBQ2xEQyxJQUFJLENBQUNSLGdCQUNMZSxZQUFZLENBQUNWLEtBQUtELElBQUk7SUFFekIsT0FBT1UsY0FBY0UsU0FBUztBQUNoQztBQUVBLG9DQUFvQztBQUM3QixlQUFlQyxXQUFXYixJQUFZO0lBQzNDLE1BQU0sRUFBRUUsS0FBSyxFQUFFLEdBQUcsTUFBTVgsY0FBY1ksT0FBTyxDQUMxQ0MsSUFBSSxDQUFDUixnQkFDTGtCLE1BQU0sQ0FBQztRQUFDZDtLQUFLO0lBRWhCLElBQUlFLE9BQU87UUFDVCxNQUFNLElBQUlNLE1BQU0sQ0FBQyxlQUFlLEVBQUVOLE1BQU1PLE9BQU8sQ0FBQyxDQUFDO0lBQ25EO0FBQ0Y7QUFFQSw0QkFBNEI7QUFDckIsU0FBU00saUJBQ2RDLE1BQWMsRUFDZEMsWUFBb0IsRUFDcEJDLE9BQWdCO0lBRWhCLE1BQU1DLFlBQVlDLEtBQUtDLEdBQUc7SUFDMUIsTUFBTUMsWUFBWUMsS0FBS0MsTUFBTSxHQUFHQyxRQUFRLENBQUMsSUFBSUMsU0FBUyxDQUFDLEdBQUc7SUFDMUQsTUFBTUMsZ0JBQWdCVixhQUFhVyxLQUFLLENBQUMsS0FBS0MsR0FBRztJQUNqRCxNQUFNQyxXQUFXLENBQUMsRUFBRVgsVUFBVSxDQUFDLEVBQUVHLFVBQVUsQ0FBQyxFQUFFSyxjQUFjLENBQUM7SUFFN0QsSUFBSVQsU0FBUztRQUNYLE9BQU8sQ0FBQyxFQUFFRixPQUFPLENBQUMsRUFBRUUsUUFBUSxDQUFDLEVBQUVZLFNBQVMsQ0FBQztJQUMzQztJQUVBLE9BQU8sQ0FBQyxFQUFFZCxPQUFPLENBQUMsRUFBRWMsU0FBUyxDQUFDO0FBQ2hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGFmaXBvcnRyYWl0LW5leHRqcy8uL3NyYy9saWIvc3VwYWJhc2UudHM/MDZlMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVDbGllbnQgfSBmcm9tICdAc3VwYWJhc2Uvc3VwYWJhc2UtanMnO1xuXG4vLyBDcmVhdGUgU3VwYWJhc2UgY2xpZW50IGZvciBjbGllbnQtc2lkZSBvcGVyYXRpb25zXG5leHBvcnQgY29uc3Qgc3VwYWJhc2UgPSBjcmVhdGVDbGllbnQoXG4gIHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCEsXG4gIHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX0FOT05fS0VZIVxuKTtcblxuLy8gQ3JlYXRlIFN1cGFiYXNlIGFkbWluIGNsaWVudCBmb3Igc2VydmVyLXNpZGUgb3BlcmF0aW9uc1xuLy8gUGFzdGlrYW4gaW5pIGRpZWtzcG9yIGxhbmdzdW5nIGFnYXIgJ2RhdGFiYXNlJyBiaXNhIG1lbmdndW5ha2FubnlhXG5leHBvcnQgY29uc3Qgc3VwYWJhc2VBZG1pbiA9IGNyZWF0ZUNsaWVudChcbiAgcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMISxcbiAgcHJvY2Vzcy5lbnYuU1VQQUJBU0VfU0VSVklDRV9ST0xFX0tFWSEsXG4gIHtcbiAgICBhdXRoOiB7XG4gICAgICBhdXRvUmVmcmVzaFRva2VuOiBmYWxzZSxcbiAgICAgIHBlcnNpc3RTZXNzaW9uOiBmYWxzZVxuICAgIH1cbiAgfVxuKTtcblxuLy8gU3RvcmFnZSBidWNrZXQgbmFtZVxuZXhwb3J0IGNvbnN0IFNUT1JBR0VfQlVDS0VUID0gcHJvY2Vzcy5lbnYuU1VQQUJBU0VfU1RPUkFHRV9CVUNLRVQgfHwgJ3Bob3Rvcyc7IC8vIE1lbmdndW5ha2FuIGRlZmF1bHQgJ3Bob3RvcydcblxuLy8gVXBsb2FkIGZpbGUgdG8gU3VwYWJhc2UgU3RvcmFnZVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwbG9hZEZpbGUoZmlsZTogRmlsZSwgcGF0aDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VBZG1pbi5zdG9yYWdlXG4gICAgLmZyb20oU1RPUkFHRV9CVUNLRVQpXG4gICAgLnVwbG9hZChwYXRoLCBmaWxlLCB7XG4gICAgICBjYWNoZUNvbnRyb2w6ICczNjAwJyxcbiAgICAgIHVwc2VydDogZmFsc2VcbiAgICB9KTtcblxuICBpZiAoZXJyb3IpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVwbG9hZCBmYWlsZWQ6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgfVxuXG4gIC8vIEdldCBwdWJsaWMgVVJMXG4gIGNvbnN0IHsgZGF0YTogcHVibGljVXJsRGF0YSB9ID0gc3VwYWJhc2VBZG1pbi5zdG9yYWdlXG4gICAgLmZyb20oU1RPUkFHRV9CVUNLRVQpXG4gICAgLmdldFB1YmxpY1VybChkYXRhLnBhdGgpO1xuXG4gIHJldHVybiBwdWJsaWNVcmxEYXRhLnB1YmxpY1VybDtcbn1cblxuLy8gRGVsZXRlIGZpbGUgZnJvbSBTdXBhYmFzZSBTdG9yYWdlXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVsZXRlRmlsZShwYXRoOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VBZG1pbi5zdG9yYWdlXG4gICAgLmZyb20oU1RPUkFHRV9CVUNLRVQpXG4gICAgLnJlbW92ZShbcGF0aF0pO1xuXG4gIGlmIChlcnJvcikge1xuICAgIHRocm93IG5ldyBFcnJvcihgRGVsZXRlIGZhaWxlZDogJHtlcnJvci5tZXNzYWdlfWApO1xuICB9XG59XG5cbi8vIEdlbmVyYXRlIHVuaXF1ZSBmaWxlIHBhdGhcbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZUZpbGVQYXRoKFxuICBmb2xkZXI6IHN0cmluZywgXG4gIG9yaWdpbmFsTmFtZTogc3RyaW5nLCBcbiAgZXZlbnRJZD86IHN0cmluZ1xuKTogc3RyaW5nIHtcbiAgY29uc3QgdGltZXN0YW1wID0gRGF0ZS5ub3coKTtcbiAgY29uc3QgcmFuZG9tU3RyID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDIsIDgpO1xuICBjb25zdCBmaWxlRXh0ZW5zaW9uID0gb3JpZ2luYWxOYW1lLnNwbGl0KCcuJykucG9wKCk7XG4gIGNvbnN0IGZpbGVOYW1lID0gYCR7dGltZXN0YW1wfV8ke3JhbmRvbVN0cn0uJHtmaWxlRXh0ZW5zaW9ufWA7XG4gIFxuICBpZiAoZXZlbnRJZCkge1xuICAgIHJldHVybiBgJHtmb2xkZXJ9LyR7ZXZlbnRJZH0vJHtmaWxlTmFtZX1gO1xuICB9XG4gIFxuICByZXR1cm4gYCR7Zm9sZGVyfS8ke2ZpbGVOYW1lfWA7XG59ICJdLCJuYW1lcyI6WyJjcmVhdGVDbGllbnQiLCJzdXBhYmFzZSIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwiLCJORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSIsInN1cGFiYXNlQWRtaW4iLCJTVVBBQkFTRV9TRVJWSUNFX1JPTEVfS0VZIiwiYXV0aCIsImF1dG9SZWZyZXNoVG9rZW4iLCJwZXJzaXN0U2Vzc2lvbiIsIlNUT1JBR0VfQlVDS0VUIiwiU1VQQUJBU0VfU1RPUkFHRV9CVUNLRVQiLCJ1cGxvYWRGaWxlIiwiZmlsZSIsInBhdGgiLCJkYXRhIiwiZXJyb3IiLCJzdG9yYWdlIiwiZnJvbSIsInVwbG9hZCIsImNhY2hlQ29udHJvbCIsInVwc2VydCIsIkVycm9yIiwibWVzc2FnZSIsInB1YmxpY1VybERhdGEiLCJnZXRQdWJsaWNVcmwiLCJwdWJsaWNVcmwiLCJkZWxldGVGaWxlIiwicmVtb3ZlIiwiZ2VuZXJhdGVGaWxlUGF0aCIsImZvbGRlciIsIm9yaWdpbmFsTmFtZSIsImV2ZW50SWQiLCJ0aW1lc3RhbXAiLCJEYXRlIiwibm93IiwicmFuZG9tU3RyIiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwic3Vic3RyaW5nIiwiZmlsZUV4dGVuc2lvbiIsInNwbGl0IiwicG9wIiwiZmlsZU5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/supabase.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/next","vendor-chunks/ws","vendor-chunks/whatwg-url","vendor-chunks/webidl-conversions","vendor-chunks/isows"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fadmin%2Fstats%2Froute&page=%2Fapi%2Fadmin%2Fstats%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fstats%2Froute.ts&appDir=%2Fhome%2Fdevbox%2Fhafi-portrait-stable%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Fdevbox%2Fhafi-portrait-stable&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();