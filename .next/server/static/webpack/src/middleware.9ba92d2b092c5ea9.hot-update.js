"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("src/middleware",{

/***/ "(middleware)/./src/lib/auth.ts":
/*!*************************!*\
  !*** ./src/lib/auth.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authenticateUser: () => (/* binding */ authenticateUser),\n/* harmony export */   cleanupExpiredSessions: () => (/* binding */ cleanupExpiredSessions),\n/* harmony export */   createDefaultAdminUsers: () => (/* binding */ createDefaultAdminUsers),\n/* harmony export */   createSession: () => (/* binding */ createSession),\n/* harmony export */   destroySession: () => (/* binding */ destroySession),\n/* harmony export */   generateToken: () => (/* binding */ generateToken),\n/* harmony export */   getUserById: () => (/* binding */ getUserById),\n/* harmony export */   hasPermission: () => (/* binding */ hasPermission),\n/* harmony export */   hashPassword: () => (/* binding */ hashPassword),\n/* harmony export */   initializeAuth: () => (/* binding */ initializeAuth),\n/* harmony export */   logActivity: () => (/* binding */ logActivity),\n/* harmony export */   validateSession: () => (/* binding */ validateSession),\n/* harmony export */   verifyPassword: () => (/* binding */ verifyPassword),\n/* harmony export */   verifyToken: () => (/* binding */ verifyToken)\n/* harmony export */ });\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bcryptjs */ \"(middleware)/./node_modules/bcryptjs/index.js\");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jsonwebtoken */ \"(middleware)/./node_modules/jsonwebtoken/index.js\");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jsonwebtoken__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @supabase/supabase-js */ \"(middleware)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n/**\n * Authentication Utilities\n * HafiPortrait Admin Authentication System\n */ \n\n\n// Create Supabase client with service role key for admin operations\nconst supabaseUrl = \"https://azspktldiblhrwebzmwq.supabase.co\";\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\nconst supabaseAdmin = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_2__.createClient)(supabaseUrl, supabaseServiceKey, {\n    auth: {\n        autoRefreshToken: false,\n        persistSession: false\n    }\n});\nconst JWT_SECRET = process.env.JWT_SECRET || \"hafiportrait-secret-key-change-in-production\";\nconst SESSION_DURATION = 24 * 60 * 60 * 1000; // 24 hours\n/**\n * Hash password using bcrypt\n */ async function hashPassword(password) {\n    const saltRounds = 12;\n    return await bcryptjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].hash(password, saltRounds);\n}\n/**\n * Verify password against hash\n */ async function verifyPassword(password, hash) {\n    return await bcryptjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"].compare(password, hash);\n}\n/**\n * Generate JWT token\n */ function generateToken(userId, username) {\n    return jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default().sign({\n        userId,\n        username\n    }, JWT_SECRET, {\n        expiresIn: \"24h\"\n    });\n}\n/**\n * Verify JWT token\n */ function verifyToken(token) {\n    try {\n        const decoded = jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default().verify(token, JWT_SECRET);\n        return {\n            userId: decoded.userId,\n            username: decoded.username\n        };\n    } catch (error) {\n        return null;\n    }\n}\n/**\n * Create admin users with hashed passwords\n */ async function createDefaultAdminUsers() {\n    const defaultUsers = [\n        {\n            username: \"hafi\",\n            password: \"Hantu@112233\",\n            email: \"hafi@hafiportrait.com\",\n            full_name: \"Hafi Portrait\"\n        },\n        {\n            username: \"nandika\",\n            password: \"Hantu@112233\",\n            email: \"nandika@hafiportrait.com\",\n            full_name: \"Nandika\"\n        }\n    ];\n    for (const user of defaultUsers){\n        try {\n            // Check if user already exists\n            const { data: existingUser } = await supabaseAdmin.from(\"admin_users\").select(\"id\").eq(\"username\", user.username).single();\n            if (!existingUser) {\n                const hashedPassword = await hashPassword(user.password);\n                const { error } = await supabaseAdmin.from(\"admin_users\").insert({\n                    username: user.username,\n                    password_hash: hashedPassword,\n                    email: user.email,\n                    full_name: user.full_name,\n                    role: \"superadmin\"\n                });\n                if (error) {\n                    console.error(`Error creating user ${user.username}:`, error);\n                } else {\n                    console.log(`✅ Created superadmin user: ${user.username}`);\n                }\n            } else {\n                console.log(`ℹ️ User ${user.username} already exists`);\n            }\n        } catch (error) {\n            console.error(`Error processing user ${user.username}:`, error);\n        }\n    }\n}\n/**\n * Authenticate user with username and password\n */ async function authenticateUser(credentials) {\n    try {\n        const { data: user, error } = await supabaseAdmin.from(\"admin_users\").select(\"*\").eq(\"username\", credentials.username).eq(\"is_active\", true).single();\n        if (error || !user) {\n            return null;\n        }\n        const isValidPassword = await verifyPassword(credentials.password, user.password_hash);\n        if (!isValidPassword) {\n            return null;\n        }\n        // Update last login\n        await supabaseAdmin.from(\"admin_users\").update({\n            last_login: new Date().toISOString()\n        }).eq(\"id\", user.id);\n        // Return user without password hash\n        const { password_hash, ...userWithoutPassword } = user;\n        return userWithoutPassword;\n    } catch (error) {\n        console.error(\"Authentication error:\", error);\n        return null;\n    }\n}\n/**\n * Create session for authenticated user\n */ async function createSession(userId, ipAddress, userAgent) {\n    const sessionId = generateSessionId();\n    const expiresAt = new Date(Date.now() + SESSION_DURATION).toISOString();\n    const { error } = await supabaseAdmin.from(\"admin_sessions\").insert({\n        id: sessionId,\n        user_id: userId,\n        expires_at: expiresAt,\n        ip_address: ipAddress,\n        user_agent: userAgent\n    });\n    if (error) {\n        throw new Error(\"Failed to create session\");\n    }\n    return sessionId;\n}\n/**\n * Validate session\n */ async function validateSession(sessionId) {\n    try {\n        const { data: session, error } = await supabaseAdmin.from(\"admin_sessions\").select(`\n        *,\n        admin_users (\n          id, username, email, full_name, role, is_active, last_login, created_at\n        )\n      `).eq(\"id\", sessionId).gt(\"expires_at\", new Date().toISOString()).single();\n        if (error || !session || !session.admin_users) {\n            return null;\n        }\n        return session.admin_users;\n    } catch (error) {\n        console.error(\"Session validation error:\", error);\n        return null;\n    }\n}\n/**\n * Destroy session (logout)\n */ async function destroySession(sessionId) {\n    await supabaseAdmin.from(\"admin_sessions\").delete().eq(\"id\", sessionId);\n}\n/**\n * Clean up expired sessions\n */ async function cleanupExpiredSessions() {\n    await supabaseAdmin.from(\"admin_sessions\").delete().lt(\"expires_at\", new Date().toISOString());\n}\n/**\n * Log admin activity\n */ async function logActivity(userId, action, resource, resourceId, details, ipAddress, userAgent) {\n    try {\n        await supabaseAdmin.from(\"admin_activity_logs\").insert({\n            user_id: userId,\n            action,\n            resource,\n            resource_id: resourceId,\n            details,\n            ip_address: ipAddress,\n            user_agent: userAgent\n        });\n    } catch (error) {\n        console.error(\"Failed to log activity:\", error);\n    }\n}\n/**\n * Generate secure session ID\n */ function generateSessionId() {\n    return `sess_${Date.now()}_${Math.random().toString(36).substring(2, 15)}`;\n}\n/**\n * Get user by ID\n */ async function getUserById(userId) {\n    try {\n        const { data: user, error } = await supabase.from(\"admin_users\").select(\"id, username, email, full_name, role, is_active, last_login, created_at\").eq(\"id\", userId).eq(\"is_active\", true).single();\n        if (error || !user) {\n            return null;\n        }\n        return user;\n    } catch (error) {\n        console.error(\"Get user error:\", error);\n        return null;\n    }\n}\n/**\n * Check if user has permission\n */ function hasPermission(user, permission) {\n    // Superadmin has all permissions\n    if (user.role === \"superadmin\") {\n        return true;\n    }\n    // Add more role-based permissions here if needed\n    return false;\n}\n/**\n * Initialize authentication system\n */ async function initializeAuth() {\n    try {\n        console.log(\"\\uD83D\\uDD10 Initializing authentication system...\");\n        // Create default admin users\n        await createDefaultAdminUsers();\n        // Clean up expired sessions\n        await cleanupExpiredSessions();\n        console.log(\"✅ Authentication system initialized\");\n    } catch (error) {\n        console.error(\"❌ Failed to initialize authentication:\", error);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(middleware)/./src/lib/auth.ts\n");

/***/ })

});